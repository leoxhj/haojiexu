// Generated by CoffeeScript 1.12.6
(function() {
  var ChangeRequestTicket, IncidentTicket, InfrastructureChangeTicket, OPTTicket, RestorationTicket, ServiceRequestTicket, TaskTicket, Ticket,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Ticket = (function() {
    function Ticket(tid) {
      this.tid = tid;
      this.requestBody = "";
      this.data = void 0;
    }

    Ticket.prototype.fetchInfo = function(robot, callback) {
      var self;
      self = this;
      robot.logger.info('start fetchInfo');
      return robot.http('http://osg.ops.ctripcorp.com/api/11100').post(JSON.stringify({
        "access_token": "a22335403b2e5bb676efe821a9474993",
        "request_body": this.requestBody
      }))(function(err, res, body) {
        var jsonBody, ref;
        robot.logger.debug('fetchInfo body', body);
        try {
          jsonBody = JSON.parse(body);
        } catch (error) {
          jsonBody = {};
        }
        if ((jsonBody != null ? jsonBody.status : void 0) === 'success') {
          if (((ref = jsonBody.data) != null ? ref.length : void 0) > 0) {
            self.data = jsonBody.data[0];
          }
        } else {
          robot.logger.error('fetchInfo fail', jsonBody);
        }
        return callback(err, body);
      });
    };

    Ticket.prototype.getInfoStr = function() {
      return 'http://r.ctripcorp.com/remedy/' + this.tid;
    };

    return Ticket;

  })();

  IncidentTicket = (function(superClass) {
    extend(IncidentTicket, superClass);

    IncidentTicket.prototype.statusMap = {
      0: "已记录",
      1: "已分派",
      2: "处理中",
      3: "暂停中",
      4: "已解决",
      5: "已关闭",
      6: "已取消",
      7: "已重开"
    };

    function IncidentTicket(tid) {
      this.tid = tid;
      IncidentTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "HPD:Help Desk",
        "query": {
          "Incident_Number": this.tid
        },
        "fieldNames": ["Assigned_Group", "Assignee", "Description", "Status"],
        "order": "Entry_ID",
        "start": 0,
        "limit": 1
      };
    }

    IncidentTicket.prototype.getInfoStr = function() {
      var str;
      str = IncidentTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "  处理人: " + this.data.Assignee + "  主题: " + this.data.Description + "  [color=#0000FF]" + this.statusMap[this.data.Status] + "[/color]";
      }
      return str;
    };

    return IncidentTicket;

  })(Ticket);

  InfrastructureChangeTicket = (function(superClass) {
    extend(InfrastructureChangeTicket, superClass);

    InfrastructureChangeTicket.prototype.statusMap = {
      0: "起草中",
      1: "已提交",
      2: "已设计",
      3: "已接受",
      4: "已批准",
      5: "进行中",
      6: "已实施",
      7: "已复核",
      8: "暂停中",
      9: "已延期",
      10: "已否决",
      11: "已完成",
      12: "已失败"
    };

    function InfrastructureChangeTicket(tid) {
      this.tid = tid;
      InfrastructureChangeTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "CHG:Infrastructure Change",
        "query": {
          "Infrastructure_Change_ID": this.tid
        },
        "fieldNames": ["ASGRP", "ASCHG", "Description", "Change_Request_Status"],
        "order": "Request_ID",
        "start": 0,
        "limit": 1
      };
    }

    InfrastructureChangeTicket.prototype.getInfoStr = function() {
      var str;
      str = InfrastructureChangeTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "  负责人: " + this.data.ASCHG + "  主题: " + this.data.Description + "  [color=#0000FF]" + this.statusMap[this.data.Change_Request_Status] + "[/color]";
      }
      return str;
    };

    return InfrastructureChangeTicket;

  })(Ticket);

  TaskTicket = (function(superClass) {
    extend(TaskTicket, superClass);

    TaskTicket.prototype.statusMap = {
      0: "等待中",
      1: "已分派",
      2: "已接受",
      3: "进行中",
      4: "已完成",
      5: "已失败",
      6: "已取消",
      7: "已拒绝"
    };

    function TaskTicket(tid) {
      this.tid = tid;
      TaskTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "TMS:Task",
        "query": {
          "Task_ID": this.tid
        },
        "fieldNames": ["Assignee_Group", "Assignee", "TaskName", "TMS_Status"],
        "order": "Task_ID",
        "start": 0,
        "limit": 1
      };
    }

    TaskTicket.prototype.getInfoStr = function() {
      var str;
      str = TaskTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "  工单负责人: " + this.data.Assignee + "  主题: " + this.data.TaskName + "  [color=#0000FF]" + this.statusMap[this.data.TMS_Status] + "[/color]";
      }
      return str;
    };

    return TaskTicket;

  })(Ticket);

  OPTTicket = (function(superClass) {
    extend(OPTTicket, superClass);

    OPTTicket.prototype.statusMap = {
      0: "新操作任务",
      1: "任务实施中",
      2: "任务完成"
    };

    function OPTTicket(tid) {
      this.tid = tid;
      OPTTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "CTRIP:OperationWorkOrder",
        "query": {
          "Request_ID": this.tid
        },
        "fieldNames": ["OPT_Assigned_Group", "OPT_Assigned", "Short_Description", "Status"],
        "order": "Request_ID",
        "start": 0,
        "limit": 1
      };
    }

    OPTTicket.prototype.getInfoStr = function() {
      var str;
      str = OPTTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "  负责人: " + this.data.OPT_Assigned + "  主题: " + this.data.Short_Description + "  [color=#0000FF]" + this.statusMap[this.data.Status] + "[/color]";
      }
      return str;
    };

    return OPTTicket;

  })(Ticket);

  RestorationTicket = (function(superClass) {
    extend(RestorationTicket, superClass);

    RestorationTicket.prototype.statusMap = {
      8000: "处理中",
      25000: "已恢复",
      32000: "已关闭",
      33000: "已取消"
    };

    function RestorationTicket(tid) {
      this.tid = tid;
      RestorationTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "CTRIP:RestorationTicket",
        "query": {
          "Ticket_ID": this.tid
        },
        "fieldNames": ["Chr_AssignedGroup", "Chr_Assignee", "Summary", "Status"],
        "order": "Request_ID",
        "start": 0,
        "limit": 1
      };
    }

    RestorationTicket.prototype.getInfoStr = function() {
      var str;
      str = RestorationTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "  负责人: " + this.data.Chr_Assignee + "  主题: " + this.data.Summary + "  [color=#0000FF]" + this.statusMap[this.data.Status] + "[/color]";
      }
      return str;
    };

    return RestorationTicket;

  })(Ticket);

  ChangeRequestTicket = (function(superClass) {
    extend(ChangeRequestTicket, superClass);

    ChangeRequestTicket.prototype.statusMap = {
      0: "准备中",
      1: "待审批",
      2: "已批准",
      3: "待执行",
      4: "执行中",
      5: "已过期",
      6: "已拒绝",
      7: "已完成",
      8: "已取消",
      9: "已关闭",
      10: "已失败",
      11: "已接受"
    };

    function ChangeRequestTicket(tid) {
      this.tid = tid;
      ChangeRequestTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "CTRIP:ChangeRequest",
        "query": {
          "TicketID": this.tid
        },
        "fieldNames": ["Assigned_Group_", "Assignee", "Summary", "Status"],
        "order": "Request_ID",
        "start": 0,
        "limit": 1
      };
    }

    ChangeRequestTicket.prototype.getInfoStr = function() {
      var str;
      str = ChangeRequestTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "  处理人: " + this.data.Assignee + "  主题: " + this.data.Summary + "  [color=#0000FF]" + this.statusMap[this.data.Status] + "[/color]";
      }
      return str;
    };

    return ChangeRequestTicket;

  })(Ticket);

  ServiceRequestTicket = (function(superClass) {
    extend(ServiceRequestTicket, superClass);

    ServiceRequestTicket.prototype.statusMap = {
      0: "Pending",
      1: "Success",
      2: "Failure",
      3: "Processing",
      4: "Hold"
    };

    ServiceRequestTicket.prototype.statusMap2 = {
      0: "ENP",
      1: "WOLF"
    };

    function ServiceRequestTicket(tid) {
      this.tid = tid;
      ServiceRequestTicket.__super__.constructor.call(this, this.tid);
      this.requestBody = {
        "action": "CTRIP:APIStagingForm",
        "query": {
          "ApplicationID": this.tid
        },
        "fieldNames": ["Chr_LastENPEventID", "Chr_CallbackURL", "Status", "MQ_Type", "OParameter1", "Remedy_Event"],
        "order": "Transaction_ID",
        "start": 0,
        "limit": 1
      };
    }

    ServiceRequestTicket.prototype.getInfoStr = function() {
      var str;
      str = ServiceRequestTicket.__super__.getInfoStr.apply(this, arguments);
      if (this.data) {
        str += "\nRemedy_Event: " + this.data.Remedy_Event + "\nMQ类型: " + this.statusMap2[this.data.MQ_Type] + "\nENP事件ID: " + this.data.Chr_LastENPEventID + "\n回调地址: " + this.data.Chr_CallbackURL + "\nStatus: [color=#0000FF]" + this.statusMap[this.data.Status] + "[/color]\n数据: " + this.data.OParameter1;
      }
      return str;
    };

    return ServiceRequestTicket;

  })(Ticket);

  module.exports = function(robot) {
    return robot.hear(/^ *(?:INC|CRQ|TAS)\d{12} *$|^ *(?:RESTR|CHNGE|APPSV|SASRV|SECUR|MONTR|DBSRV)\d{10} *$|^ *OP\d{13} *$/i, function(res) {
      var match, tickObj;
      robot.logger.info('matched ticket bot', res.match);
      match = res.match[0].trim();
      if (match.indexOf('INC') === 0) {
        tickObj = new IncidentTicket(match);
      } else if (match.indexOf('CRQ') === 0) {
        tickObj = new InfrastructureChangeTicket(match);
      } else if (match.indexOf('TAS') === 0) {
        tickObj = new TaskTicket(match);
      } else if (match.indexOf('OP') === 0) {
        tickObj = new OPTTicket(match);
      } else if (match.indexOf('RESTR') === 0) {
        tickObj = new RestorationTicket(match);
      } else if (match.indexOf('CHNGE') === 0) {
        tickObj = new ChangeRequestTicket(match);
      } else {
        tickObj = new ServiceRequestTicket(match);
      }
      return tickObj != null ? tickObj.fetchInfo(robot, function(err, data) {
        if (err) {
          robot.logger.error(err);
        }
        return res.send(tickObj.getInfoStr());
      }) : void 0;
    });
  };

}).call(this);

//# sourceMappingURL=remedyTicket.js.map
